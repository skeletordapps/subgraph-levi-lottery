// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EntriesBought extends ethereum.Event {
  get params(): EntriesBought__Params {
    return new EntriesBought__Params(this);
  }
}

export class EntriesBought__Params {
  _event: EntriesBought;

  constructor(event: EntriesBought) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accountEntries(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payment(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GLPBought extends ethereum.Event {
  get params(): GLPBought__Params {
    return new GLPBought__Params(this);
  }
}

export class GLPBought__Params {
  _event: GLPBought;

  constructor(event: GLPBought) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get glpBought(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountEthConverted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class GLPSent extends ethereum.Event {
  get params(): GLPSent__Params {
    return new GLPSent__Params(this);
  }
}

export class GLPSent__Params {
  _event: GLPSent;

  constructor(event: GLPSent) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get glpSent(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Refunded extends ethereum.Event {
  get params(): Refunded__Params {
    return new Refunded__Params(this);
  }
}

export class Refunded__Params {
  _event: Refunded;

  constructor(event: Refunded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get round(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get etherRefunded(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get entriesRefunded(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RoundActivated extends ethereum.Event {
  get params(): RoundActivated__Params {
    return new RoundActivated__Params(this);
  }
}

export class RoundActivated__Params {
  _event: RoundActivated;

  constructor(event: RoundActivated) {
    this._event = event;
  }

  get round(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WinnerSelected extends ethereum.Event {
  get params(): WinnerSelected__Params {
    return new WinnerSelected__Params(this);
  }
}

export class WinnerSelected__Params {
  _event: WinnerSelected;

  constructor(event: WinnerSelected) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get serviceProvider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get round(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get prize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get service(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Withdrawed extends ethereum.Event {
  get params(): Withdrawed__Params {
    return new Withdrawed__Params(this);
  }
}

export class Withdrawed__Params {
  _event: Withdrawed;

  constructor(event: Withdrawed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  GMX_REWARD_ROUTER(): Address {
    let result = super.call(
      "GMX_REWARD_ROUTER",
      "GMX_REWARD_ROUTER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_GMX_REWARD_ROUTER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "GMX_REWARD_ROUTER",
      "GMX_REWARD_ROUTER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MULTISIG(): Address {
    let result = super.call("MULTISIG", "MULTISIG():(address)", []);

    return result[0].toAddress();
  }

  try_MULTISIG(): ethereum.CallResult<Address> {
    let result = super.tryCall("MULTISIG", "MULTISIG():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STAKED_GLP(): Address {
    let result = super.call("STAKED_GLP", "STAKED_GLP():(address)", []);

    return result[0].toAddress();
  }

  try_STAKED_GLP(): ethereum.CallResult<Address> {
    let result = super.tryCall("STAKED_GLP", "STAKED_GLP():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  entryPrice(): BigInt {
    let result = super.call("entryPrice", "entryPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_entryPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("entryPrice", "entryPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  etherCollectedInRound(param0: BigInt): BigInt {
    let result = super.call(
      "etherCollectedInRound",
      "etherCollectedInRound(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_etherCollectedInRound(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "etherCollectedInRound",
      "etherCollectedInRound(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRound(): BigInt {
    let result = super.call("getRound", "getRound():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRound(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRound", "getRound():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasClaimedRefund(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "hasClaimedRefund",
      "hasClaimedRefund(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasClaimedRefund(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasClaimedRefund",
      "hasClaimedRefund(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interval(): BigInt {
    let result = super.call("interval", "interval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interval", "interval():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTimeGLPBought(): BigInt {
    let result = super.call(
      "lastTimeGLPBought",
      "lastTimeGLPBought():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastTimeGLPBought(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeGLPBought",
      "lastTimeGLPBought():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfEntriesInRoundPerAccount(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "numberOfEntriesInRoundPerAccount",
      "numberOfEntriesInRoundPerAccount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_numberOfEntriesInRoundPerAccount(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfEntriesInRoundPerAccount",
      "numberOfEntriesInRoundPerAccount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  playersInRound(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "playersInRound",
      "playersInRound(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_playersInRound(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "playersInRound",
      "playersInRound(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roundClosed(param0: BigInt): boolean {
    let result = super.call("roundClosed", "roundClosed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_roundClosed(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("roundClosed", "roundClosed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  startDate(): BigInt {
    let result = super.call("startDate", "startDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startDate", "startDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniqueAccountsInRound(param0: BigInt): BigInt {
    let result = super.call(
      "uniqueAccountsInRound",
      "uniqueAccountsInRound(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_uniqueAccountsInRound(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueAccountsInRound",
      "uniqueAccountsInRound(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _multisig(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConvertEthBalanceIntoGLPCall extends ethereum.Call {
  get inputs(): ConvertEthBalanceIntoGLPCall__Inputs {
    return new ConvertEthBalanceIntoGLPCall__Inputs(this);
  }

  get outputs(): ConvertEthBalanceIntoGLPCall__Outputs {
    return new ConvertEthBalanceIntoGLPCall__Outputs(this);
  }
}

export class ConvertEthBalanceIntoGLPCall__Inputs {
  _call: ConvertEthBalanceIntoGLPCall;

  constructor(call: ConvertEthBalanceIntoGLPCall) {
    this._call = call;
  }
}

export class ConvertEthBalanceIntoGLPCall__Outputs {
  _call: ConvertEthBalanceIntoGLPCall;

  constructor(call: ConvertEthBalanceIntoGLPCall) {
    this._call = call;
  }
}

export class EnterLotteryCall extends ethereum.Call {
  get inputs(): EnterLotteryCall__Inputs {
    return new EnterLotteryCall__Inputs(this);
  }

  get outputs(): EnterLotteryCall__Outputs {
    return new EnterLotteryCall__Outputs(this);
  }
}

export class EnterLotteryCall__Inputs {
  _call: EnterLotteryCall;

  constructor(call: EnterLotteryCall) {
    this._call = call;
  }

  get amountEntries(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterLotteryCall__Outputs {
  _call: EnterLotteryCall;

  constructor(call: EnterLotteryCall) {
    this._call = call;
  }
}

export class GetRefundCall extends ethereum.Call {
  get inputs(): GetRefundCall__Inputs {
    return new GetRefundCall__Inputs(this);
  }

  get outputs(): GetRefundCall__Outputs {
    return new GetRefundCall__Outputs(this);
  }
}

export class GetRefundCall__Inputs {
  _call: GetRefundCall;

  constructor(call: GetRefundCall) {
    this._call = call;
  }

  get round(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetRefundCall__Outputs {
  _call: GetRefundCall;

  constructor(call: GetRefundCall) {
    this._call = call;
  }
}

export class SelectWinnerCall extends ethereum.Call {
  get inputs(): SelectWinnerCall__Inputs {
    return new SelectWinnerCall__Inputs(this);
  }

  get outputs(): SelectWinnerCall__Outputs {
    return new SelectWinnerCall__Outputs(this);
  }
}

export class SelectWinnerCall__Inputs {
  _call: SelectWinnerCall;

  constructor(call: SelectWinnerCall) {
    this._call = call;
  }

  get round(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SelectWinnerCall__Outputs {
  _call: SelectWinnerCall;

  constructor(call: SelectWinnerCall) {
    this._call = call;
  }
}

export class SendGLPToMultisigCall extends ethereum.Call {
  get inputs(): SendGLPToMultisigCall__Inputs {
    return new SendGLPToMultisigCall__Inputs(this);
  }

  get outputs(): SendGLPToMultisigCall__Outputs {
    return new SendGLPToMultisigCall__Outputs(this);
  }
}

export class SendGLPToMultisigCall__Inputs {
  _call: SendGLPToMultisigCall;

  constructor(call: SendGLPToMultisigCall) {
    this._call = call;
  }
}

export class SendGLPToMultisigCall__Outputs {
  _call: SendGLPToMultisigCall;

  constructor(call: SendGLPToMultisigCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
