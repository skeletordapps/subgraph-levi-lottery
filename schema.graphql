enum RoundStatus {
  OPEN
  ACTIVATED
  CLOSED
}

type EntriesBought @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  round: BigInt! # uint256
  accountEntries: BigInt! # uint256
  payment: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GLPBought @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  beneficiary: Bytes! # address
  glpBought: BigInt! # uint256
  amountEthConverted: BigInt! # uint256
  _timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Refunded @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  round: BigInt! # uint256
  etherRefunded: BigInt! # uint256
  entriesRefunded: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoundActivated @entity(immutable: true) {
  id: Bytes!
  round: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WinnerSelected @entity(immutable: true) {
  id: Bytes!
  winner: Bytes! # address
  serviceProvider: Bytes! # address
  round: BigInt! # uint256
  prize: BigInt! # uint256
  fee: BigInt! # uint256
  service: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawed @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Lotto @entity {
  id: ID!
  # entryFee: BigInt!
  feesCollected: BigInt!
  glpConverted: BigInt!
}

type Round @entity {
  id: ID!
  status: RoundStatus!
  totalEntries: BigInt!
  users: [User!]! 
  winner: User
}

type User @entity {
  id: ID!
  account: Bytes!
  userEntries: [UserEntry!]!
}

type UserEntry @entity {
  id: ID!
  round: Round!
  total: BigInt!
}


